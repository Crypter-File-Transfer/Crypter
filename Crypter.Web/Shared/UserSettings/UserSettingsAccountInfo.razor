@*
 * Copyright (C) 2025 Crypter File Transfer
 *
 * This file is part of the Crypter file transfer project.
 *
 * Crypter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Crypter source code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can be released from the requirements of the aforementioned license
 * by purchasing a commercial license. Buying such a license is mandatory
 * as soon as you develop commercial activities involving the Crypter source
 * code without disclosing the source code of your own applications.
 *
 * Contact the current copyright holder to discuss commercial license options.
 *@

@if (_isDataReady)
{
    <h3>Contact Info</h3>
    <form>
        <div class="mb-3">
            <label for="contactInfoEmailAddress" class="form-label">@(_isEditingEmailAddress ? "New Email Address" : "Email Address")</label>
            <input @bind="_emailAddressEdit" type="email" class="form-control" id="contactInfoEmailAddress" name="email" placeholder="@(_isEditingEmailAddress ? string.Empty : "Email Not Set")" readonly="@(!_isEditingEmailAddress)"/>
            
            @if (!string.IsNullOrEmpty(_emailAddress) && !_isEditingEmailAddress)
            {
                <span class="text-success">Verified</span>
            }
            
            @if (_isEditingEmailAddress)
            {
                @if (!string.IsNullOrEmpty(_emailAddressError))
                {
                    <span class="text-danger">@_emailAddressError</span>
                }
            }
        </div>

        @if (!_isEditingEmailAddress && !string.IsNullOrEmpty(_pendingEmailAddress))
        {
            <div class="mb-3">
                <label for="pendingEmailAddress" class="form-label">Pending Email Address</label>
                <input @bind="_pendingEmailAddress" type="email" class="form-control" id="pendingEmailAddress" name="pendingEmail" readonly/>
                <span class="text-danger">A verification link has been sent to this email address. Click the link to verify this email address.</span>
            </div>
        }
        
        <div class="mb-3" hidden="@(!_isEditingEmailAddress)">
            <label for="contactInfoCurrentPassword" class="form-label">Current Password</label>
            <input @bind="_emailAddressPassword" type="password" class="form-control" id="contactInfoCurrentPassword"/>
            @if (!string.IsNullOrEmpty(_emailAddressPasswordError))
            {
                <span class="text-danger">@_emailAddressPasswordError</span>
            }
        </div>
        <button type="button" class="btn btn-secondary mx-auto" @onclick="OnEditContactInfoClicked" hidden="@_isEditingEmailAddress">Edit</button>
        <button type="button" class="btn btn-secondary mx-auto" @onclick="OnCancelForEditContactInfoClicked" hidden="@(!_isEditingEmailAddress)">Cancel</button>
        <button type="button" class="btn btn-primary mx-auto" @onclick="async () => await OnSaveContactInfoClickedAsync()" hidden="@(!_isEditingEmailAddress)">Save</button>
        @if (!string.IsNullOrEmpty(_genericEmailAddressError))
        {
            <br/>
            <span class="text-danger">@_genericEmailAddressError</span>
        }
    </form>
    
    <h3>Password</h3>
    <form>
        <div class="mb-3" hidden="@(!_isEditingPassword)">
            <label for="passwordChangeOldPassword" class="form-label">Current Password</label>
            <input @bind="_passwordChangeOldPassword" type="password" class="form-control" id="passwordChangeOldPassword"/>
            @if (!string.IsNullOrEmpty(_oldPasswordError))
            {
                <span class="text-danger">@_oldPasswordError</span>
            }
            <br/>
            
            <label for="passwordChangeNewPassword" class="form-label">New Password</label>
            <input @bind="_passwordChangeNewPassword" type="password" class="form-control" id="passwordChangeNewPassword"/>
            @if (!string.IsNullOrEmpty(_newPasswordError))
            {
                <span class="text-danger">@_newPasswordError</span>
            }
            <br/>

            <label for="passwordChangeConfirmPassword" class="form-label">Confirm New Password</label>
            <input @bind="_passwordChangeConfirmPassword" type="password" class="form-control" id="passwordChangeConfirmPassword"/>
            @if (!string.IsNullOrEmpty(_confirmPasswordError))
            {
                <span class="text-danger">@_confirmPasswordError</span>
            }
        </div>
        <div class="mb-3>">
            <button type="submit" class="btn btn-primary" @onclick:preventDefault @onclick="OnChangePasswordClicked" hidden="@(_isEditingPassword)">Change Password</button>
            <button type="button" class="btn btn-secondary mx-auto" @onclick="OnCancelForChangePasswordClicked" hidden="@(!_isEditingPassword)">Cancel</button>
            <button type="button" class="btn btn-primary mx-auto" @onclick="async () => await OnSavePasswordChangeClickAsync()" hidden="@(!_isEditingPassword)">Save</button>
            @if (!string.IsNullOrEmpty(_passwordChangeError))
            {
                <br/>
                <span class="text-danger">@_passwordChangeError</span>
            }
        </div>
    </form>
}
