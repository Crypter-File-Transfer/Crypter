version: "3.9"
services:
  api:
    profiles:
      - web
      - dev
    image: ghcr.io/saraelsa/crypter_api
    build:
      context: .
      dockerfile: Crypter.API.Dockerfile
    expose:
      - "8080"
    environment:
      ASPNETCORE_TransferStorageSettings__Location: /mnt/storage
      CUSTOMCONNSTR_DefaultConnection: host=${POSTGRES_HOST:-db};database=crypter;user id=crypter;pwd=${POSTGRES_USER_PASSWORD-dev};
      CUSTOMCONNSTR_HangfireConnection: host=${POSTGRES_HANGFIRE_HOST:-db};database=crypter_hangfire;user id=crypter_hangfire;pwd=${POSTGRES_HANGFIRE_USER_PASSWORD-dev};
    volumes:
      - ./Containers/API/storage:/mnt/storage
      - ./Containers/API/appsettings.json:/app/appsettings.json
    restart: always
  web:
    profiles:
      - web
      - dev
    image: ghcr.io/saraelsa/crypter_web
    build:
      context: .
      dockerfile: Crypter.Web.Dockerfile
    ports:
      - 80:8080
    environment:
      CRYPTER_API_BASE: http://api:8080
      CADDY_TLS_CER: /mnt/tls/cert.pem
      CADDY_TLS_KEY: /mnt/tls/key.pem
    volumes:
      - ./Containers/Caddy/tls:/mnt/tls
    restart: always
  db:
    profiles:
      - db
      - dev
    image: postgres:15.2
    expose:
      - "5432"
    ports:
      - ${POSTGRES_BIND_IP-localhost}:5432:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_SUPERUSER_PASSWORD-dev}
      POSTGRES_C_PASSWORD: ${POSTGRES_USER_PASSWORD-dev}
      POSTGRES_HF_PASSWORD: ${POSTGRES_HANGFIRE_USER_PASSWORD-dev}
    volumes:
      - ./Containers/PostgreSQL/data:/var/lib/postgresql/data
      - ./Containers/PostgreSQL/postgres-init-files:/docker-entrypoint-initdb.d
    restart: always
